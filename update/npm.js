"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const url = require("url");
const RegistryClient = require('npm-registry-client');
const npmPackageJsonCache = new Map();
const npmConfigOptionCache = new Map();
function getNpmConfigOption(option, scope, tryWithoutScope) {
    if (scope && tryWithoutScope) {
        return rxjs_1.concat(getNpmConfigOption(option, scope), getNpmConfigOption(option)).pipe(operators_1.filter(result => !!result), operators_1.defaultIfEmpty(), operators_1.first());
    }
    const fullOption = `${scope ? scope + ':' : ''}${option}`;
    let value = npmConfigOptionCache.get(fullOption);
    if (value) {
        return value;
    }
    const subject = new rxjs_1.ReplaySubject(1);
    try {
        child_process_1.exec(`npm get ${fullOption}`, (error, data) => {
            if (error) {
                subject.next();
            }
            else {
                data = data.trim();
                if (!data || data === 'undefined' || data === 'null') {
                    subject.next();
                }
                else {
                    subject.next(data);
                }
            }
            subject.complete();
        });
    }
    catch (_a) {
        subject.next();
        subject.complete();
    }
    value = subject.asObservable();
    npmConfigOptionCache.set(fullOption, value);
    return value;
}
function getNpmClientSslOptions(strictSsl, cafile) {
    const sslOptions = {};
    if (strictSsl === 'false') {
        sslOptions.strict = false;
    }
    else if (strictSsl === 'true') {
        sslOptions.strict = true;
    }
    if (cafile) {
        sslOptions.ca = fs_1.readFileSync(cafile);
    }
    return sslOptions;
}
/**
 * Get the NPM repository's package.json for a package. This is p
 * @param {string} packageName The package name to fetch.
 * @param {string} registryUrl The NPM Registry URL to use.
 * @param {LoggerApi} logger A logger instance to log debug information.
 * @returns An observable that will put the pacakge.json content.
 * @private
 */
function getNpmPackageJson(packageName, registryUrl, logger) {
    const scope = packageName.startsWith('@') ? packageName.split('/')[0] : undefined;
    return (registryUrl ? rxjs_1.of(registryUrl) : getNpmConfigOption('registry', scope, true)).pipe(operators_1.map(partialUrl => {
        if (!partialUrl) {
            partialUrl = 'https://registry.npmjs.org/';
        }
        const partial = url.parse(partialUrl);
        let fullUrl = new url.URL(`http://${partial.host}/${packageName.replace(/\//g, '%2F')}`);
        try {
            const registry = new url.URL(partialUrl);
            registry.pathname = (registry.pathname || '')
                .replace(/\/?$/, '/' + packageName.replace(/\//g, '%2F'));
            fullUrl = new url.URL(url.format(registry));
        }
        catch (_a) { }
        logger.debug(`Getting package.json from '${packageName}' (url: ${JSON.stringify(fullUrl)})...`);
        return fullUrl;
    }), operators_1.concatMap(fullUrl => {
        let maybeRequest = npmPackageJsonCache.get(fullUrl.toString());
        if (maybeRequest) {
            return maybeRequest;
        }
        const registryKey = `//${fullUrl.host}/`;
        return rxjs_1.concat(getNpmConfigOption('proxy'), getNpmConfigOption('https-proxy'), getNpmConfigOption('strict-ssl'), getNpmConfigOption('cafile'), getNpmConfigOption('_auth', registryKey, true), getNpmConfigOption('_authToken', registryKey, true), getNpmConfigOption('username', registryKey, true), getNpmConfigOption('password', registryKey, true), getNpmConfigOption('alwaysAuth', registryKey, true)).pipe(operators_1.toArray(), operators_1.concatMap(options => {
            const [http, https, strictSsl, cafile, token, authToken, username, password, alwaysAuth,] = options;
            const subject = new rxjs_1.ReplaySubject(1);
            const sslOptions = getNpmClientSslOptions(strictSsl, cafile);
            let auth;
            if (authToken) {
                auth = { token: authToken, alwaysAuth };
            }
            else if (token) {
                auth = { token, alwaysAuth };
            }
            else if (username) {
                auth = { username, password, alwaysAuth };
            }
            const client = new RegistryClient({
                proxy: { http, https },
                ssl: sslOptions,
            });
            client.log.level = 'silent';
            const params = {
                timeout: 30000,
                auth,
            };
            client.get(fullUrl.toString(), params, (error, data) => {
                if (error) {
                    subject.error(error);
                }
                subject.next(data);
                subject.complete();
            });
            maybeRequest = subject.asObservable();
            npmPackageJsonCache.set(fullUrl.toString(), maybeRequest);
            return maybeRequest;
        }));
    }));
}
exports.getNpmPackageJson = getNpmPackageJson;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9zY2hlbWF0aWNzL3VwZGF0ZS91cGRhdGUvbnBtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBUUEsaURBQXFDO0FBQ3JDLDJCQUFrQztBQUNsQywrQkFBNkQ7QUFDN0QsOENBQXdGO0FBQ3hGLDJCQUEyQjtBQUczQixNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUV0RCxNQUFNLG1CQUFtQixHQUFHLElBQUksR0FBRyxFQUFnRCxDQUFDO0FBQ3BGLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxHQUFHLEVBQTBDLENBQUM7QUFFL0UsNEJBQ0UsTUFBYyxFQUNkLEtBQWMsRUFDZCxlQUF5QjtJQUV6QixFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksZUFBZSxDQUFDLENBQUMsQ0FBQztRQUM3QixNQUFNLENBQUMsYUFBTSxDQUNYLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFDakMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQzNCLENBQUMsSUFBSSxDQUNKLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQzFCLDBCQUFjLEVBQUUsRUFDaEIsaUJBQUssRUFBRSxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxVQUFVLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQztJQUUxRCxJQUFJLEtBQUssR0FBRyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDakQsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNWLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxvQkFBYSxDQUFxQixD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RSxVQUFVO2FBQ2hCLENBQUMsQ0FBQztZQUNILE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztZQUM1QixNQUFNLE1BQU0sR0FBRztnQkFDYixPQUFPLEVBQUUsS0FBSztnQkFDZCxJQUFJO2FBQ0wsQ0FBQztZQUVGLE1BQU0sQ0FBQyxHQUFHLENBQ1IsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUNsQixNQUFNLEVBQ04sQ0FBQyxLQUFhLEVBQUUsSUFBOEIsRUFBRSxFQUFFO2dCQUNsRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3ZCLENBQUM7Z0JBRUQsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDbkIsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3JCLENBQUMsQ0FBQyxDQUFDO1lBRUgsWUFBWSxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN0QyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBRTFELE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUNILENBQUM7QUFFSixDQUFDO0FBMUdELDhDQTBHQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IGxvZ2dpbmcgfSBmcm9tICdAYW5ndWxhci1kZXZraXQvY29yZSc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0LCBjb25jYXQsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjb25jYXRNYXAsIGRlZmF1bHRJZkVtcHR5LCBmaWx0ZXIsIGZpcnN0LCBtYXAsIHRvQXJyYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgKiBhcyB1cmwgZnJvbSAndXJsJztcbmltcG9ydCB7IE5wbVJlcG9zaXRvcnlQYWNrYWdlSnNvbiB9IGZyb20gJy4vbnBtLXBhY2thZ2UtanNvbic7XG5cbmNvbnN0IFJlZ2lzdHJ5Q2xpZW50ID0gcmVxdWlyZSgnbnBtLXJlZ2lzdHJ5LWNsaWVudCcpO1xuXG5jb25zdCBucG1QYWNrYWdlSnNvbkNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIE9ic2VydmFibGU8TnBtUmVwb3NpdG9yeVBhY2thZ2VKc29uPj4oKTtcbmNvbnN0IG5wbUNvbmZpZ09wdGlvbkNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIE9ic2VydmFibGU8c3RyaW5nIHwgdW5kZWZpbmVkPj4oKTtcblxuZnVuY3Rpb24gZ2V0TnBtQ29uZmlnT3B0aW9uKFxuICBvcHRpb246IHN0cmluZyxcbiAgc2NvcGU/OiBzdHJpbmcsXG4gIHRyeVdpdGhvdXRTY29wZT86IGJvb2xlYW4sXG4pOiBPYnNlcnZhYmxlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICBpZiAoc2NvcGUgJiYgdHJ5V2l0aG91dFNjb3BlKSB7XG4gICAgcmV0dXJuIGNvbmNhdChcbiAgICAgIGdldE5wbUNvbmZpZ09wdGlvbihvcHRpb24sIHNjb3BlKSxcbiAgICAgIGdldE5wbUNvbmZpZ09wdGlvbihvcHRpb24pLFxuICAgICkucGlwZShcbiAgICAgIGZpbHRlcihyZXN1bHQgPT4gISFyZXN1bHQpLFxuICAgICAgZGVmYXVsdElmRW1wdHkoKSxcbiAgICAgIGZpcnN0KCksXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGZ1bGxPcHRpb24gPSBgJHtzY29wZSA/IHNjb3BlICsgJzonIDogJyd9JHtvcHRpb259YDtcblxuICBsZXQgdmFsdWUgPSBucG1Db25maWdPcHRpb25DYWNoZS5nZXQoZnVsbE9wdGlvbik7XG4gIGlmICh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGNvbnN0IHN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxzdHJpbmcgfCB1bmRlZmluZWQ+KDEpO1xuXG4gIHRyeSB7XG4gICAgZXhlYyhgbnBtIGdldCAke2Z1bGxPcHRpb259YCwgKGVycm9yLCBkYXRhKSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgc3ViamVjdC5uZXh0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhID0gZGF0YS50cmltKCk7XG4gICAgICAgIGlmICghZGF0YSB8fCBkYXRhID09PSAndW5kZWZpbmVkJyB8fCBkYXRhID09PSAnbnVsbCcpIHtcbiAgICAgICAgICBzdWJqZWN0Lm5leHQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdWJqZWN0Lm5leHQoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICB9IGNhdGNoIHtcbiAgICBzdWJqZWN0Lm5leHQoKTtcbiAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG4gIH1cblxuICB2YWx1ZSA9IHN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gIG5wbUNvbmZpZ09wdGlvbkNhY2hlLnNldChmdWxsT3B0aW9uLCB2YWx1ZSk7XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBnZXROcG1DbGllbnRTc2xPcHRpb25zKHN0cmljdFNzbD86IHN0cmluZywgY2FmaWxlPzogc3RyaW5nKSB7XG4gIGNvbnN0IHNzbE9wdGlvbnM6IHsgc3RyaWN0PzogYm9vbGVhbiwgY2E/OiBCdWZmZXIgfSA9IHt9O1xuXG4gIGlmIChzdHJpY3RTc2wgPT09ICdmYWxzZScpIHtcbiAgICBzc2xPcHRpb25zLnN0cmljdCA9IGZhbHNlO1xuICB9IGVsc2UgaWYgKHN0cmljdFNzbCA9PT0gJ3RydWUnKSB7XG4gICAgc3NsT3B0aW9ucy5zdHJpY3QgPSB0cnVlO1xuICB9XG5cbiAgaWYgKGNhZmlsZSkge1xuICAgIHNzbE9wdGlvbnMuY2EgPSByZWFkRmlsZVN5bmMoY2FmaWxlKTtcbiAgfVxuXG4gIHJldHVybiBzc2xPcHRpb25zO1xufVxuXG4vKipcbiAqIEdldCB0aGUgTlBNIHJlcG9zaXRvcnkncyBwYWNrYWdlLmpzb24gZm9yIGEgcGFja2FnZS4gVGhpcyBpcyBwXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFja2FnZU5hbWUgVGhlIHBhY2thZ2UgbmFtZSB0byBmZXRjaC5cbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyeVVybCBUaGUgTlBNIFJlZ2lzdHJ5IFVSTCB0byB1c2UuXG4gKiBAcGFyYW0ge0xvZ2dlckFwaX0gbG9nZ2VyIEEgbG9nZ2VyIGluc3RhbmNlIHRvIGxvZyBkZWJ1ZyBpbmZvcm1hdGlvbi5cbiAqIEByZXR1cm5zIEFuIG9ic2VydmFibGUgdGhhdCB3aWxsIHB1dCB0aGUgcGFjYWtnZS5qc29uIGNvbnRlbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TnBtUGFja2FnZUpzb24oXG4gIHBhY2thZ2VOYW1lOiBzdHJpbmcsXG4gIHJlZ2lzdHJ5VXJsOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIGxvZ2dlcjogbG9nZ2luZy5Mb2dnZXJBcGksXG4pOiBPYnNlcnZhYmxlPFBhcnRpYWw8TnBtUmVwb3NpdG9yeVBhY2thZ2VKc29uPj4ge1xuICBjb25zdCBzY29wZSA9IHBhY2thZ2VOYW1lLnN0YXJ0c1dpdGgoJ0AnKSA/IHBhY2thZ2VOYW1lLnNwbGl0KCcvJylbMF0gOiB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIChcbiAgICByZWdpc3RyeVVybCA/IG9mKHJlZ2lzdHJ5VXJsKSA6IGdldE5wbUNvbmZpZ09wdGlvbigncmVnaXN0cnknLCBzY29wZSwgdHJ1ZSlcbiAgKS5waXBlKFxuICAgIG1hcChwYXJ0aWFsVXJsID0+IHtcbiAgICAgIGlmICghcGFydGlhbFVybCkge1xuICAgICAgICBwYXJ0aWFsVXJsID0gJ2h0dHBzOi8vcmVnaXN0cnkubnBtanMub3JnLyc7XG4gICAgICB9XG4gICAgICBjb25zdCBwYXJ0aWFsID0gdXJsLnBhcnNlKHBhcnRpYWxVcmwpO1xuICAgICAgbGV0IGZ1bGxVcmwgPSBuZXcgdXJsLlVSTChgaHR0cDovLyR7cGFydGlhbC5ob3N0fS8ke3BhY2thZ2VOYW1lLnJlcGxhY2UoL1xcLy9nLCAnJTJGJyl9YCk7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZWdpc3RyeSA9IG5ldyB1cmwuVVJMKHBhcnRpYWxVcmwpO1xuICAgICAgICByZWdpc3RyeS5wYXRobmFtZSA9IChyZWdpc3RyeS5wYXRobmFtZSB8fCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXC8/JC8sICcvJyArIHBhY2thZ2VOYW1lLnJlcGxhY2UoL1xcLy9nLCAnJTJGJykpO1xuICAgICAgICBmdWxsVXJsID0gbmV3IHVybC5VUkwodXJsLmZvcm1hdChyZWdpc3RyeSkpO1xuICAgICAgfSBjYXRjaCB7fVxuXG4gICAgICBsb2dnZXIuZGVidWcoXG4gICAgICAgIGBHZXR0aW5nIHBhY2thZ2UuanNvbiBmcm9tICcke3BhY2thZ2VOYW1lfScgKHVybDogJHtKU09OLnN0cmluZ2lmeShmdWxsVXJsKX0pLi4uYCxcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBmdWxsVXJsO1xuICAgIH0pLFxuICAgIGNvbmNhdE1hcChmdWxsVXJsID0+IHtcbiAgICAgIGxldCBtYXliZVJlcXVlc3QgPSBucG1QYWNrYWdlSnNvbkNhY2hlLmdldChmdWxsVXJsLnRvU3RyaW5nKCkpO1xuICAgICAgaWYgKG1heWJlUmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gbWF5YmVSZXF1ZXN0O1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZWdpc3RyeUtleSA9IGAvLyR7ZnVsbFVybC5ob3N0fS9gO1xuXG4gICAgICByZXR1cm4gY29uY2F0KFxuICAgICAgICBnZXROcG1Db25maWdPcHRpb24oJ3Byb3h5JyksXG4gICAgICAgIGdldE5wbUNvbmZpZ09wdGlvbignaHR0cHMtcHJveHknKSxcbiAgICAgICAgZ2V0TnBtQ29uZmlnT3B0aW9uKCdzdHJpY3Qtc3NsJyksXG4gICAgICAgIGdldE5wbUNvbmZpZ09wdGlvbignY2FmaWxlJyksXG4gICAgICAgIGdldE5wbUNvbmZpZ09wdGlvbignX2F1dGgnLCByZWdpc3RyeUtleSwgdHJ1ZSksXG4gICAgICAgIGdldE5wbUNvbmZpZ09wdGlvbignX2F1dGhUb2tlbicsIHJlZ2lzdHJ5S2V5LCB0cnVlKSxcbiAgICAgICAgZ2V0TnBtQ29uZmlnT3B0aW9uKCd1c2VybmFtZScsIHJlZ2lzdHJ5S2V5LCB0cnVlKSxcbiAgICAgICAgZ2V0TnBtQ29uZmlnT3B0aW9uKCdwYXNzd29yZCcsIHJlZ2lzdHJ5S2V5LCB0cnVlKSxcbiAgICAgICAgZ2V0TnBtQ29uZmlnT3B0aW9uKCdhbHdheXNBdXRoJywgcmVnaXN0cnlLZXksIHRydWUpLFxuICAgICAgKS5waXBlKFxuICAgICAgICB0b0FycmF5KCksXG4gICAgICAgIGNvbmNhdE1hcChvcHRpb25zID0+IHtcbiAgICAgICAgICBjb25zdCBbXG4gICAgICAgICAgICBodHRwLFxuICAgICAgICAgICAgaHR0cHMsXG4gICAgICAgICAgICBzdHJpY3RTc2wsXG4gICAgICAgICAgICBjYWZpbGUsXG4gICAgICAgICAgICB0b2tlbixcbiAgICAgICAgICAgIGF1dGhUb2tlbixcbiAgICAgICAgICAgIHVzZXJuYW1lLFxuICAgICAgICAgICAgcGFzc3dvcmQsXG4gICAgICAgICAgICBhbHdheXNBdXRoLFxuICAgICAgICAgIF0gPSBvcHRpb25zO1xuXG4gICAgICAgICAgY29uc3Qgc3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PE5wbVJlcG9zaXRvcnlQYWNrYWdlSnNvbj4oMSk7XG5cbiAgICAgICAgICBjb25zdCBzc2xPcHRpb25zID0gZ2V0TnBtQ2xpZW50U3NsT3B0aW9ucyhzdHJpY3RTc2wsIGNhZmlsZSk7XG5cbiAgICAgICAgICBsZXQgYXV0aDtcbiAgICAgICAgICBpZiAoYXV0aFRva2VuKSB7XG4gICAgICAgICAgICBhdXRoID0geyB0b2tlbjogYXV0aFRva2VuLCBhbHdheXNBdXRoIH07XG4gICAgICAgICAgfSBlbHNlIGlmICh0b2tlbikge1xuICAgICAgICAgICAgYXV0aCA9IHsgdG9rZW4sIGFsd2F5c0F1dGggfTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHVzZXJuYW1lKSB7XG4gICAgICAgICAgICBhdXRoID0geyB1c2VybmFtZSwgcGFzc3dvcmQsIGFsd2F5c0F1dGggfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBjbGllbnQgPSBuZXcgUmVnaXN0cnlDbGllbnQoe1xuICAgICAgICAgICAgcHJveHk6IHsgaHR0cCwgaHR0cHMgfSxcbiAgICAgICAgICAgIHNzbDogc3NsT3B0aW9ucyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjbGllbnQubG9nLmxldmVsID0gJ3NpbGVudCc7XG4gICAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgdGltZW91dDogMzAwMDAsXG4gICAgICAgICAgICBhdXRoLFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjbGllbnQuZ2V0KFxuICAgICAgICAgICAgZnVsbFVybC50b1N0cmluZygpLFxuICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAgKGVycm9yOiBvYmplY3QsIGRhdGE6IE5wbVJlcG9zaXRvcnlQYWNrYWdlSnNvbikgPT4ge1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgIHN1YmplY3QuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdWJqZWN0Lm5leHQoZGF0YSk7XG4gICAgICAgICAgICBzdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBtYXliZVJlcXVlc3QgPSBzdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgICAgIG5wbVBhY2thZ2VKc29uQ2FjaGUuc2V0KGZ1bGxVcmwudG9TdHJpbmcoKSwgbWF5YmVSZXF1ZXN0KTtcblxuICAgICAgICAgIHJldHVybiBtYXliZVJlcXVlc3Q7XG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9KSxcbiAgKTtcblxufVxuIl19