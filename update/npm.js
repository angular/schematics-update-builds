"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const pacote = require('pacote');
const npmPackageJsonCache = new Map();
let npmrc;
try {
    npmrc = _readNpmRc();
}
catch (_a) {
    npmrc = {};
}
function _readNpmRc() {
    // TODO: have a way to read options without using fs directly.
    const path = require('path');
    const fs = require('fs');
    const perProjectNpmrc = path.resolve('.npmrc');
    const configs = [];
    if (process.platform === 'win32') {
        if (process.env.LOCALAPPDATA) {
            configs.push(fs.readFileSync(path.join(process.env.LOCALAPPDATA, '.npmrc'), 'utf8'));
        }
    }
    else {
        if (process.env.HOME) {
            configs.push(fs.readFileSync(path.join(process.env.HOME, '.npmrc'), 'utf8'));
        }
    }
    if (fs.existsSync(perProjectNpmrc)) {
        configs.push(fs.readFileSync(perProjectNpmrc, 'utf8'));
    }
    const allOptions = {};
    for (const config of configs) {
        const allOptionsArr = config.split(/\r?\n/).map(x => x.trim());
        allOptionsArr.forEach(x => {
            const [key, ...value] = x.split('=');
            const fullValue = value.join('=').trim();
            if (key && fullValue && fullValue !== 'null') {
                allOptions[key.trim()] = fullValue;
            }
        });
        if (allOptions.cafile) {
            const cafile = allOptions.cafile;
            delete allOptions.cafile;
            try {
                allOptions.ca = fs_1.readFileSync(cafile, 'utf8');
                allOptions.ca = allOptions.ca.replace(/\r?\n/, '\\n');
            }
            catch (_a) { }
        }
    }
    return allOptions;
}
/**
 * Get the NPM repository's package.json for a package. This is p
 * @param {string} packageName The package name to fetch.
 * @param {string} registryUrl The NPM Registry URL to use.
 * @param {LoggerApi} logger A logger instance to log debug information.
 * @returns An observable that will put the pacakge.json content.
 * @private
 */
function getNpmPackageJson(packageName, registryUrl, _logger) {
    const cachedResponse = npmPackageJsonCache.get(packageName);
    if (cachedResponse) {
        return cachedResponse;
    }
    const resultPromise = pacote.packument(packageName, Object.assign({ 'full-metadata': true }, npmrc, { registry: registryUrl }));
    const response = rxjs_1.from(resultPromise).pipe(operators_1.shareReplay());
    npmPackageJsonCache.set(packageName, response);
    return response;
}
exports.getNpmPackageJson = getNpmPackageJson;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9zY2hlbWF0aWNzL3VwZGF0ZS91cGRhdGUvbnBtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBUUEsMkJBQWtDO0FBQ2xDLCtCQUF3QztBQUN4Qyw4Q0FBNkM7QUFHN0MsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRWpDLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxHQUFHLEVBQWdELENBQUM7QUFFcEYsSUFBSSxLQUFnQyxDQUFDO0FBQ3JDLElBQUk7SUFDRixLQUFLLEdBQUcsVUFBVSxFQUFFLENBQUM7Q0FDdEI7QUFBQyxXQUFNO0lBQ04sS0FBSyxHQUFHLEVBQUUsQ0FBQztDQUNaO0FBR0QsU0FBUyxVQUFVO0lBQ2pCLDhEQUE4RDtJQUM5RCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0IsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pCLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFL0MsTUFBTSxPQUFPLEdBQWEsRUFBRSxDQUFDO0lBRTdCLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLEVBQUU7UUFDaEMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRTtZQUM1QixPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ3RGO0tBQ0Y7U0FBTTtRQUNMLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUU7WUFDcEIsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUM5RTtLQUNGO0lBRUQsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxFQUFFO1FBQ2xDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUN4RDtJQUVELE1BQU0sVUFBVSxHQUE4QixFQUFFLENBQUM7SUFDakQsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7UUFDNUIsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUUvRCxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3hCLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDekMsSUFBSSxHQUFHLElBQUksU0FBUyxJQUFJLFNBQVMsS0FBSyxNQUFNLEVBQUU7Z0JBQzVDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUM7YUFDcEM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRTtZQUNyQixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO1lBQ2pDLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQztZQUN6QixJQUFJO2dCQUNGLFVBQVUsQ0FBQyxFQUFFLEdBQUcsaUJBQVksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQzdDLFVBQVUsQ0FBQyxFQUFFLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ3ZEO1lBQUMsV0FBTSxHQUFHO1NBQ1o7S0FDRjtJQUVELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IsaUJBQWlCLENBQy9CLFdBQW1CLEVBQ25CLFdBQStCLEVBQy9CLE9BQTBCO0lBRTFCLE1BQU0sY0FBYyxHQUFHLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM1RCxJQUFJLGNBQWMsRUFBRTtRQUNsQixPQUFPLGNBQWMsQ0FBQztLQUN2QjtJQUVELE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQ3BDLFdBQVcsa0JBRVQsZUFBZSxFQUFFLElBQUksSUFDbEIsS0FBSyxJQUNSLFFBQVEsRUFBRSxXQUFXLElBRXhCLENBQUM7SUFFRixNQUFNLFFBQVEsR0FBRyxXQUFJLENBQTJCLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBVyxFQUFFLENBQUMsQ0FBQztJQUNuRixtQkFBbUIsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRS9DLE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUM7QUF2QkQsOENBdUJDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgbG9nZ2luZyB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGZyb20gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHNoYXJlUmVwbGF5IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTnBtUmVwb3NpdG9yeVBhY2thZ2VKc29uIH0gZnJvbSAnLi9ucG0tcGFja2FnZS1qc29uJztcblxuY29uc3QgcGFjb3RlID0gcmVxdWlyZSgncGFjb3RlJyk7XG5cbmNvbnN0IG5wbVBhY2thZ2VKc29uQ2FjaGUgPSBuZXcgTWFwPHN0cmluZywgT2JzZXJ2YWJsZTxOcG1SZXBvc2l0b3J5UGFja2FnZUpzb24+PigpO1xuXG5sZXQgbnBtcmM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG50cnkge1xuICBucG1yYyA9IF9yZWFkTnBtUmMoKTtcbn0gY2F0Y2gge1xuICBucG1yYyA9IHt9O1xufVxuXG5cbmZ1bmN0aW9uIF9yZWFkTnBtUmMoKTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSB7XG4gIC8vIFRPRE86IGhhdmUgYSB3YXkgdG8gcmVhZCBvcHRpb25zIHdpdGhvdXQgdXNpbmcgZnMgZGlyZWN0bHkuXG4gIGNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4gIGNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbiAgY29uc3QgcGVyUHJvamVjdE5wbXJjID0gcGF0aC5yZXNvbHZlKCcubnBtcmMnKTtcblxuICBjb25zdCBjb25maWdzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52LkxPQ0FMQVBQREFUQSkge1xuICAgICAgY29uZmlncy5wdXNoKGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5lbnYuTE9DQUxBUFBEQVRBLCAnLm5wbXJjJyksICd1dGY4JykpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuSE9NRSkge1xuICAgICAgY29uZmlncy5wdXNoKGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5lbnYuSE9NRSwgJy5ucG1yYycpLCAndXRmOCcpKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZnMuZXhpc3RzU3luYyhwZXJQcm9qZWN0TnBtcmMpKSB7XG4gICAgY29uZmlncy5wdXNoKGZzLnJlYWRGaWxlU3luYyhwZXJQcm9qZWN0TnBtcmMsICd1dGY4JykpO1xuICB9XG5cbiAgY29uc3QgYWxsT3B0aW9uczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuICBmb3IgKGNvbnN0IGNvbmZpZyBvZiBjb25maWdzKSB7XG4gICAgY29uc3QgYWxsT3B0aW9uc0FyciA9IGNvbmZpZy5zcGxpdCgvXFxyP1xcbi8pLm1hcCh4ID0+IHgudHJpbSgpKTtcblxuICAgIGFsbE9wdGlvbnNBcnIuZm9yRWFjaCh4ID0+IHtcbiAgICAgIGNvbnN0IFtrZXksIC4uLnZhbHVlXSA9IHguc3BsaXQoJz0nKTtcbiAgICAgIGNvbnN0IGZ1bGxWYWx1ZSA9IHZhbHVlLmpvaW4oJz0nKS50cmltKCk7XG4gICAgICBpZiAoa2V5ICYmIGZ1bGxWYWx1ZSAmJiBmdWxsVmFsdWUgIT09ICdudWxsJykge1xuICAgICAgICBhbGxPcHRpb25zW2tleS50cmltKCldID0gZnVsbFZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGFsbE9wdGlvbnMuY2FmaWxlKSB7XG4gICAgICBjb25zdCBjYWZpbGUgPSBhbGxPcHRpb25zLmNhZmlsZTtcbiAgICAgIGRlbGV0ZSBhbGxPcHRpb25zLmNhZmlsZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGFsbE9wdGlvbnMuY2EgPSByZWFkRmlsZVN5bmMoY2FmaWxlLCAndXRmOCcpO1xuICAgICAgICBhbGxPcHRpb25zLmNhID0gYWxsT3B0aW9ucy5jYS5yZXBsYWNlKC9cXHI/XFxuLywgJ1xcXFxuJyk7XG4gICAgICB9IGNhdGNoIHsgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhbGxPcHRpb25zO1xufVxuXG4vKipcbiAqIEdldCB0aGUgTlBNIHJlcG9zaXRvcnkncyBwYWNrYWdlLmpzb24gZm9yIGEgcGFja2FnZS4gVGhpcyBpcyBwXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFja2FnZU5hbWUgVGhlIHBhY2thZ2UgbmFtZSB0byBmZXRjaC5cbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyeVVybCBUaGUgTlBNIFJlZ2lzdHJ5IFVSTCB0byB1c2UuXG4gKiBAcGFyYW0ge0xvZ2dlckFwaX0gbG9nZ2VyIEEgbG9nZ2VyIGluc3RhbmNlIHRvIGxvZyBkZWJ1ZyBpbmZvcm1hdGlvbi5cbiAqIEByZXR1cm5zIEFuIG9ic2VydmFibGUgdGhhdCB3aWxsIHB1dCB0aGUgcGFjYWtnZS5qc29uIGNvbnRlbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TnBtUGFja2FnZUpzb24oXG4gIHBhY2thZ2VOYW1lOiBzdHJpbmcsXG4gIHJlZ2lzdHJ5VXJsOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIF9sb2dnZXI6IGxvZ2dpbmcuTG9nZ2VyQXBpLFxuKTogT2JzZXJ2YWJsZTxQYXJ0aWFsPE5wbVJlcG9zaXRvcnlQYWNrYWdlSnNvbj4+IHtcbiAgY29uc3QgY2FjaGVkUmVzcG9uc2UgPSBucG1QYWNrYWdlSnNvbkNhY2hlLmdldChwYWNrYWdlTmFtZSk7XG4gIGlmIChjYWNoZWRSZXNwb25zZSkge1xuICAgIHJldHVybiBjYWNoZWRSZXNwb25zZTtcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdFByb21pc2UgPSBwYWNvdGUucGFja3VtZW50KFxuICAgIHBhY2thZ2VOYW1lLFxuICAgIHtcbiAgICAgICdmdWxsLW1ldGFkYXRhJzogdHJ1ZSxcbiAgICAgIC4uLm5wbXJjLFxuICAgICAgcmVnaXN0cnk6IHJlZ2lzdHJ5VXJsLFxuICAgIH0sXG4gICk7XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBmcm9tPE5wbVJlcG9zaXRvcnlQYWNrYWdlSnNvbj4ocmVzdWx0UHJvbWlzZSkucGlwZShzaGFyZVJlcGxheSgpKTtcbiAgbnBtUGFja2FnZUpzb25DYWNoZS5zZXQocGFja2FnZU5hbWUsIHJlc3BvbnNlKTtcblxuICByZXR1cm4gcmVzcG9uc2U7XG59XG4iXX0=